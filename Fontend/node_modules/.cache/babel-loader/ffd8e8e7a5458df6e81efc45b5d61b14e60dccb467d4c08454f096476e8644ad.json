{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst CORS_PROXY = 'https://cors-anywhere.herokuapp.com/';\nconst Page = ({}) => {\n  _s();\n  const [rssItems, setRssItems] = useState([]);\n  function FetchDataFromRssFeed() {\n    const request = new XMLHttpRequest();\n    request.onreadystatechange = () => {\n      if (request.readyState === 4 && request.status === 200) {\n        const parser = new DOMParser();\n        const xml = parser.parseFromString(request.responseText, 'text/xml');\n        const items = xml.querySelectorAll('item');\n        for (let i = 0; i < items.length; i++) {\n          setRssItems(items[i]);\n        }\n      }\n    };\n    request.open('GET', 'https://www.reddit.com/.rss', true);\n    request.send();\n  }\n  useEffect(() => {\n    FetchDataFromRssFeed();\n  }, []);\n  return console.log(rssItems);\n};\n_s(Page, \"kChmdvAyWxRn48oytVZG8lTwrkU=\");\n_c = Page;\nvar _c;\n$RefreshReg$(_c, \"Page\");","map":{"version":3,"names":["useState","useEffect","CORS_PROXY","Page","_s","rssItems","setRssItems","FetchDataFromRssFeed","request","XMLHttpRequest","onreadystatechange","readyState","status","parser","DOMParser","xml","parseFromString","responseText","items","querySelectorAll","i","length","open","send","console","log","_c","$RefreshReg$"],"sources":["C:/Users/Hieu/Desktop/New folder/Project_FE/Fontend/src/component/crawlRss.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Parser from 'rss-parser';\r\n\r\nconst CORS_PROXY = 'https://cors-anywhere.herokuapp.com/';\r\ntype Props = {}\r\n\r\nconst Page = ({}: Props) => {\r\n    const [rssItems, setRssItems] = useState([]);\r\n\r\n    function FetchDataFromRssFeed() {\r\n        const request = new XMLHttpRequest();\r\n        request.onreadystatechange = () => {\r\n            if (request.readyState === 4 && request.status === 200) {\r\n                const parser = new DOMParser();\r\n                const xml = parser.parseFromString(request.responseText, 'text/xml');\r\n                const items = xml.querySelectorAll('item');\r\n                for (let i = 0; i < items.length; i++) {\r\n                    setRssItems(items[i]);\r\n                }\r\n            }\r\n        };\r\n        request.open('GET', 'https://www.reddit.com/.rss', true);\r\n        request.send();\r\n    }\r\n\r\n    useEffect(() => {\r\n        FetchDataFromRssFeed()\r\n    },[]);\r\n\r\n    return (\r\n        console.log(rssItems)\r\n    )\r\n}\r\n"],"mappings":";AAAA,SAAgBA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAGlD,MAAMC,UAAU,GAAG,sCAAsC;AAGzD,MAAMC,IAAI,GAAGA,CAAC,CAAQ,CAAC,KAAK;EAAAC,EAAA;EACxB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAE5C,SAASO,oBAAoBA,CAAA,EAAG;IAC5B,MAAMC,OAAO,GAAG,IAAIC,cAAc,CAAC,CAAC;IACpCD,OAAO,CAACE,kBAAkB,GAAG,MAAM;MAC/B,IAAIF,OAAO,CAACG,UAAU,KAAK,CAAC,IAAIH,OAAO,CAACI,MAAM,KAAK,GAAG,EAAE;QACpD,MAAMC,MAAM,GAAG,IAAIC,SAAS,CAAC,CAAC;QAC9B,MAAMC,GAAG,GAAGF,MAAM,CAACG,eAAe,CAACR,OAAO,CAACS,YAAY,EAAE,UAAU,CAAC;QACpE,MAAMC,KAAK,GAAGH,GAAG,CAACI,gBAAgB,CAAC,MAAM,CAAC;QAC1C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;UACnCd,WAAW,CAACY,KAAK,CAACE,CAAC,CAAC,CAAC;QACzB;MACJ;IACJ,CAAC;IACDZ,OAAO,CAACc,IAAI,CAAC,KAAK,EAAE,6BAA6B,EAAE,IAAI,CAAC;IACxDd,OAAO,CAACe,IAAI,CAAC,CAAC;EAClB;EAEAtB,SAAS,CAAC,MAAM;IACZM,oBAAoB,CAAC,CAAC;EAC1B,CAAC,EAAC,EAAE,CAAC;EAEL,OACIiB,OAAO,CAACC,GAAG,CAACpB,QAAQ,CAAC;AAE7B,CAAC;AAAAD,EAAA,CA1BKD,IAAI;AAAAuB,EAAA,GAAJvB,IAAI;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}